{
	"info": {
		"_postman_id": "9403bb32-79d2-4c70-bea1-69224c5344db",
		"name": "API Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Fusio Project API",
			"item": [
				{
					"name": "Get All Todo Entries",
					"item": [
						{
							"name": "Verify that Status Code is 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).not.to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}/todo",
									"host": [
										"{{baseUrl1}}"
									],
									"path": [
										"todo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that Response Time is above 200ms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).not.to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}/todo",
									"host": [
										"{{baseUrl1}}"
									],
									"path": [
										"todo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that Response Body is in JSON format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body is in JSON format\", function () {\r",
											"    pm.response.to.have.jsonBody;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}/todo",
									"host": [
										"{{baseUrl1}}"
									],
									"path": [
										"todo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title in Response body is Internal Server Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Title in the Response body is Internal Server Error\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}/todo",
									"host": [
										"{{baseUrl1}}"
									],
									"path": [
										"todo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Message in Response body is Unknown location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Message in the Response body is Unknown location\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Unknown location\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}/todo",
									"host": [
										"{{baseUrl1}}"
									],
									"path": [
										"todo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Success in Response body returns a Boolean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Success in the Response body returns Boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}/todo",
									"host": [
										"{{baseUrl1}}"
									],
									"path": [
										"todo"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get All Entries",
					"item": [
						{
							"name": "Verify that Status Code is 200 OK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}",
									"host": [
										"{{baseUrl1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that Response Time is above 200ms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).not.to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}",
									"host": [
										"{{baseUrl1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that Response Body is in JSON format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body is in JSON format\", function () {\r",
											"    pm.response.to.have.jsonBody;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}",
									"host": [
										"{{baseUrl1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Title in Response body is Fusio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Title in the Response body is Fusio\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Fusio\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}",
									"host": [
										"{{baseUrl1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "apiVersion in Response body is 6.0.2.0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Title in the Response body is 6.0.2.0\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"6.0.2.0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}",
									"host": [
										"{{baseUrl1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Entry per ID",
					"item": [
						{
							"name": "Get entry per ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}/todo/?todo_id=1",
									"host": [
										"{{baseUrl1}}"
									],
									"path": [
										"todo",
										""
									],
									"query": [
										{
											"key": "todo_id",
											"value": "1"
										}
									]
								},
								"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
							},
							"response": []
						},
						{
							"name": "Verify that Status Code is 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}/todo/?todo_id=1",
									"host": [
										"{{baseUrl1}}"
									],
									"path": [
										"todo",
										""
									],
									"query": [
										{
											"key": "todo_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that Response Time is above 200ms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).not.to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}/todo/?todo_id=1",
									"host": [
										"{{baseUrl1}}"
									],
									"path": [
										"todo",
										""
									],
									"query": [
										{
											"key": "todo_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that Response Body is in JSON format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body is in JSON format\", function () {\r",
											"    pm.response.to.have.jsonBody;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}/todo/?todo_id=1",
									"host": [
										"{{baseUrl1}}"
									],
									"path": [
										"todo",
										""
									],
									"query": [
										{
											"key": "todo_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Title in Response body is Internal Server Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Title in the Response body is Internal Server Error\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}/todo/?todo_id=1",
									"host": [
										"{{baseUrl1}}"
									],
									"path": [
										"todo",
										""
									],
									"query": [
										{
											"key": "todo_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Message in Response body is Unknown location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Message in the Response body is Unknown location\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Unknown location\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}/todo/?todo_id=1",
									"host": [
										"{{baseUrl1}}"
									],
									"path": [
										"todo",
										""
									],
									"query": [
										{
											"key": "todo_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Success in Response body returns a Boolean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Success in the Response body returns Boolean\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl1}}/todo/?todo_id=1",
									"host": [
										"{{baseUrl1}}"
									],
									"path": [
										"todo",
										""
									],
									"query": [
										{
											"key": "todo_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Simple Books API",
			"item": [
				{
					"name": "Get Books",
					"item": [
						{
							"name": "All Books",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"// print any kind of variables/message on the screen\r",
											"console.log(response[2].name);\r",
											"/*const Fiction = response.filter((book) => book.type === \"fiction\");\r",
											"console.log(Fiction)\r",
											"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
											"\r",
											"const Fiction = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"Viscount Who Loved Me\")\r",
											"\r",
											"console.log(Fiction[0].id);\r",
											"\r",
											"pm.test(\"The id number of a fiction book that available with the name The Midnight Library is \" , function () {\r",
											"    pm.expect(Fiction[0].name).eql(\"Viscount Who Loved Me\")\r",
											"});\r",
											"\r",
											"pm.globals.set(\"bookId\", Fiction[0].id);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl2}}/books",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fiction Books",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"name is The Russian\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"The Russian\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl2}}/books?type=fiction",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"books"
									],
									"query": [
										{
											"key": "type",
											"value": "fiction"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-fiction Books",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"name is Just as I Am\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Just as I Am\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl2}}/books?type=non-fiction",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"books"
									],
									"query": [
										{
											"key": "type",
											"value": "non-fiction"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Limited Number of Books",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl2}}/books?limit=2",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"books"
									],
									"query": [
										{
											"key": "limit",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Limited Number of Fiction Books",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl2}}/books?type=fiction&limit=2",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"books"
									],
									"query": [
										{
											"key": "type",
											"value": "fiction"
										},
										{
											"key": "limit",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Limited Number of Non-fiction Books",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl2}}/books?type=non-fiction&limit=2",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"books"
									],
									"query": [
										{
											"key": "type",
											"value": "non-fiction"
										},
										{
											"key": "limit",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that Response Time is above 200ms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is more than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl2}}/books",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that Status Code is 200 OK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code response is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl2}}/books",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that Response body is in JSON format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body is in JSON format\", function () {\r",
											"    pm.response.to.have.jsonBody;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl2}}/books",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that Id in the Response Body returns an Interger",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Id is an Interger\",function(){\r",
											"    pm.expect(pm.response.value);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl2}}/books",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that Id in the Response Body returns an Interger Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"available returns a Boolean\",function(){\r",
											"    pm.expect(pm.response.value);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl2}}/books",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"books"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Order Book",
					"item": [
						{
							"name": "With Valid Bearer Token",
							"item": [
								{
									"name": "Generate Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"pm.test(\"Status code response is Conflict\", function () {\r",
													"    pm.response.to.have.status(\"Conflict\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"clientName\": \"Ogoo\",\n  \"clientEmail\": \"ogoogbuanu@mailinator.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://simple-books-api.glitch.me/api-clients/",
											"protocol": "https",
											"host": [
												"simple-books-api",
												"glitch",
												"me"
											],
											"path": [
												"api-clients",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "With Valid Bearer Token, Customer Name and Valid Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"Status code response is Created\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": 4,\n  \"customerName\": \"John\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}",
											"host": [
												"{{baseUrl2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Valid Bearer Token, Customer Name and Invalid Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code response is Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": 13,\n  \"customerName\": \"John\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Valid Bearer Token, Customer Name and Invalid Book Id Format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code response is Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": \"abc\",\n  \"customerName\": \"John\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Valid Bearer Token, Valid Customer Name and No Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code response is Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": \"\",\n  \"customerName\": \"Ogoo\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "With Valid Bearer Token, Valid Book Id and No Customer Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"Status code response is Created\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Valid Bearer Token, Random Customer Name and Valid Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"Status code response is Created\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"{{$randomName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Valid Bearer Token, Random Customer Name and Random Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code response is Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": \"{{$randomInt}}\",\n  \"customerName\": \"{{$randomFullName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Valid Bearer Token, Valid Customer Name and Random Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code response is Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": \"{{$randomInt}}\",\n  \"customerName\": \"James Brown\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Valid Bearer Token, Invalid Customer Name Format and Valid Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"Status code response is Created\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": 3,\n  \"customerName\": 123456\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Valid Bearer Token, No Customer Name, and No Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code response is Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": \"\",\n  \"customerName\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "With Invalid Bearer Token Copy",
							"item": [
								{
									"name": "With Invalid Bearer Token, Customer Name and Invalid Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const OrderId = pm.response.json();\r",
													"\r",
													"console.log(OrderId.orderId);\r",
													"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Invalid Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": 13,\n  \"customerName\": \"John\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}",
											"host": [
												"{{baseUrl2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Invalid Bearer Token, Customer Name and Invalid Book Id Format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Invalid Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": \"abc\",\n  \"customerName\": \"John\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With invalid Bearer Token, Valid Customer Name and No Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Invalid Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": \"\",\n  \"customerName\": \"John\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Invalid Bearer Token, Valid Book Id and No Customer Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Invalid Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Invalid Bearer Token, Random Customer Name and Valid Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Invalid Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"{{$randomName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Invalid Bearer Token, Random Customer Name and Random Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Invalid Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": \"{{$randomInt}}\",\n  \"customerName\": \"{{$randomFullName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Invalid Bearer Token, Valid Customer Name and Random Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Invalid Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": \"{{$randomInt}}\",\n  \"customerName\": \"James Brown\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Invalid Bearer Token, Invalid Customer Name Format and Valid Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Invalid Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": 3,\n  \"customerName\": 123456\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Invalid Bearer Token, Valid Customer Name, and Valid Book Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Invalid Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"John\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "With Invalid Bearer Token, No Customer Name, and No Book Id Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Invalid Token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bookId\": \"\",\n  \"customerName\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl2}}/orders",
											"host": [
												"{{baseUrl2}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Status code response is Unauthorized\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});"
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Get All Orders",
					"item": [
						{
							"name": "With Valid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).not.to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/orders",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "With Valid Token and Valid Book Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/orders/:bookId",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders",
										":bookId"
									],
									"query": [
										{
											"key": "bookId",
											"value": "3",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "bookId",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "With Valid Token and Valid Order Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/orders/:orderId",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "XERXr0KZv-2BLn4XcSklt"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "With Valid Token and Invalid Order Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/orders/:orderId",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "2BLn4XcSklt"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "With Valid Token and Customer Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/orders/:customerName",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders",
										":customerName"
									],
									"query": [
										{
											"key": "customerName",
											"value": "James Brown",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "customerName",
											"value": "James Brown"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "With Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Invalid Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/orders",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "With No Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).not.to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/orders",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "With No Token and Valid Order Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).not.to.be.below(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/orders/:orderId",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "HtnEecTUnEZr-Rlnmr4b-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "With No Token and Invalid Order Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).not.to.be.below(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/orders/:orderId",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "Rlnmr4b-"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get an Order",
					"item": [
						{
							"name": "With Valid Order Id",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/orders/:orderId",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "HtnEecTUnEZr-Rlnmr4b-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "With Customer Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).not.to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/orders/:customerName",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders",
										":customerName"
									],
									"variable": [
										{
											"key": "customerName",
											"value": "James Brown"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "With Book Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).not.to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/orders/:bookId",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders",
										":bookId"
									],
									"variable": [
										{
											"key": "bookId",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "With Deleted Order Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).not.to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/orders/:orderId",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "HtnEecTUnEZr-Rlnmr4b-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "With Invalid Order Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).not.to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/orders/:orderId",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "bl8ZbxUCq59bH8DyYWvjo"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete an Order",
					"item": [
						{
							"name": "With Valid Order Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string OK\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"Response BODY\", function () {\r",
											"   pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl2}}/orders/:orderId",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "HtnEecTUnEZr-Rlnmr4b-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "With Book Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/:bookId",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										":bookId"
									],
									"variable": [
										{
											"key": "bookId",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string OK\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response BODY\", function () {\r",
											"   pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl2}}/:orderId",
									"host": [
										"{{baseUrl2}}"
									],
									"path": [
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "bl8ZbxUCq59bH8DyYWvjo"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl1",
			"value": "https://demo.fusio-project.org/index.php"
		},
		{
			"key": "baseUrl2",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "Token",
			"value": "89d5ac8af16ba3db2e2ef2e4e5a0aaf13ab35634ceb46ef67fc2938da0908723"
		},
		{
			"key": "Invalid Token",
			"value": "dda388f5e5ea9fa9366a2a57bf706c1968ac5fd22b5eb36d372a762d0e3ffde7"
		}
	]
}